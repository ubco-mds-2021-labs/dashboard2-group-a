plot.title = element_text(face='bold',size=20))
}
else if(opt==3){
rat <- readline("Enter the maximum percentage of rating required: ")
rat <- as.integer(rat)
ratings <- get_game_reviews_df(val,rat)
options(repr.plot.width=10, repr.plot.height=25)
ratings %>% arrange(desc(metacriticScore)) %>% head(10) %>%
ggplot() + aes(x=title,y=metacriticScore) + geom_bar(stat="identity") +
ggtitle("Top 10 stores having expected reviews") +
xlab("Company names") + ylab("Ratings") + theme_bw()+
theme(axis.text.x = element_text(angle = 60,hjust=1,face='bold',size=10),
axis.text.y = element_text(face='bold',size=10),
axis.title = element_text(face='bold',size=15),
plot.title = element_text(face='bold',size=20))
}
else {
cat("You did not enter a valid input\n")
break
}
}
response()
exit
f
response()
response()
knitr::opts_chunk$set(echo = TRUE)
library(MPV)
library(MPV)
p4.18
library(MPV)
lm(y~.,p4.18)
library(MPV)
jojo<-lm(y~.,p4.18)
summary(jojo)
model.matrix(jojo)
qr.Q(jojomatrix, complete = TRUE)
jojomatrix<-model.matrix(jojo)
qr.Q(jojomatrix, complete = TRUE)
jojomatrix<-model.matrix(jojo)
jojomatrix<-model.matrix(jojo)
qr(jojomatrix)
qr.Q(jojomatrix, complete = TRUE)
jojomatrix<-model.matrix(jojo)
jojo.qr<-qr(jojomatrix)
qr.Q(jojo.qr, complete = TRUE)
QR.jojo<-qr.Q(jojo.qr, complete = TRUE)
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-1:4]
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-(1:4)]
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-(1:4)]
Q2
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-(1:4)]
Q
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-(1:4)]
QR.jojo
Q1 <- QR.jojo[,1:4]
Q2 <- QR.jojo[,-(1:4)]
U <- qr.R(jojo.qr, complete = TRUE)
U <- qr.R(jojo.qr, complete = TRUE)
p4.18$y
U <- qr.R(jojo.qr, complete = TRUE)
y <- p4.18[,4]
U <- qr.R(jojo.qr, complete = TRUE)
y <- p4.18[,4]
y
U <- qr.R(jojo.qr, complete = TRUE)
y <- p4.18[,4]
Q1y <- t(Q1) %*% y
betahat <- solve(U,Q1y)
U <- qr.R(jojo.qr)
y <- p4.18[,4]
Q1y <- t(Q1)%*%y
betahat <- solve(U,Q1y)
U <- qr.R(jojo.qr)
y <- p4.18[,4]
Q1y <- t(Q1)%*%y
betahat <- solve(U,Q1y)
betahat
yQ2 <- t(y) %*% Q2
Q2y <- t(Q2) %*% y
sigma <- (yQ2 %*% Q2y)/9
yQ2 <- t(y) %*% Q2
Q2y <- t(Q2) %*% y
sigma <- (yQ2 %*% Q2y)/9
sigma
Q12 <- Q1[-1]
Q12 <- Q1[-1]
Q12
Q12 <- Q1[,-1]
Q12
Q12 <- Q1[,-1]
Q12y <- t(Q12) %*% y
Q12 <- Q1[,-1]
Q12y <- t(Q12) %*% y
Q12y
Q12 <- Q1[,-1]
Q12y <- t(Q12) %*% y
mean(Q12y)
var(Q12y)
Gasmil <- lm(y~x7+x10, table.b3)
Gasmil <- lm(y~x7+x10, table.b3)
summary(Gasmil)
plot(Gasmil)
tree.sample <- structure(list(height = c(41.740000000000002, 10.92, 55.82, 39.07,
11.199999999999999, 39.549999999999997, 40.850000000000001, 41.130000000000003,
60.280000000000001, 4.3300000000000001, 4.3799999999999999, 26.539999999999999,
3.9300000000000002, 25.850000000000001), age = c(15, 5, 20, 15,
5, 15, 15, 15, 25, 3, 3, 10, 3, 10)), class = c("nfnGroupedData",
"nfGroupedData", "groupedData", "data.frame"), row.names = c("43",
"16", "59", "46", "19", "48", "49", "50", "79", "10", "11", "40",
"13", "42"))
lm(height~age+(age*age),tree.sample)
lm(height~.+(age*age),tree.sample)
lm(height~.+(age*age),tree.sample)
lm(height~age+(age*age),tree.sample)
lm(height~age+(age*age),tree.sample)
tree.sample$age2 <- tree.sample$age^2
lm(height~age+age2,tree.sample)
tree.sample$age2 <- tree.sample$age^2
summary(lm(height~age+age2,tree.sample))
tree.sample$age2 <- tree.sample$age^2
summary(lm(log(height)~age+age2,tree.sample))
tree.sample$age2 <- tree.sample$age^2
summary(lm(height~age+age2,tree.sample))
tree.nls <- nls(log(height) ˜ exp(b0 + b1*age + b2*age2), data = tree.sample,
tree.nls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2), data = tree.sample,
start = c(b0 = -7.11, b1 = 3.83, b2 = -0.04) )
tree.sample$age2 <- tree.sample$age^2
summary(lm(log(height)~age+age2,tree.sample))
tree.nls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2), data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007) )
coef(tree.nls)
tree.sample$age2 <- tree.sample$age^2
tree.lm <- (lm(log(height)~age+age2,tree.sample))
tree.sample$age2 <- tree.sample$age^2
tree.lm <- (lm(log(height)~age+age2,tree.sample))
summary(tree.lm)
plot(height ˜ age+age2,
plot(height ~ age+age2,
data =tree.sample)
a0 <- coef(tree.lm)[1]
a1 <- coef(tree.lm)[2]
a2 <- coef(tree.lm)[3]
curve(exp(a0+a1*x+a2*x*x)-1, from = 0,
to = 5000, add = TRUE)
b0 <- coef(tree.nls)[1]
b1 <- coef(tree.nls)[2]
b2 <- coef(tree.nls)[3]
curve(exp(b0+b1*x+b2*x*x), from = 0,
to = 5000, add = TRUE, lty=2)
tree.nls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2), data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007),
weights = 1/age))
tree.nls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2), data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007),
weights = 1/age)
coef(tree.wnls)
tree.wnls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2), data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007),
weights = 1/age)
coef(tree.wnls)
tree <- tree.sample
n <- nrow(tree.sample)
R <- 9999
coef.sim <- matrix(0, nrow=R, ncol=2)
for (j in 1:R) f
tree <- tree.sample
n <- nrow(tree.sample)
R <- 9999
coef.sim <- matrix(0, nrow=R, ncol=2)
for (j in 1:R) {
tree$count <- rpois(n, predict(tree.nls))
tree.wnls <- nls(height ˜ exp(b0 + b1*age + b2*age2),
tree <- tree.sample
n <- nrow(tree.sample)
R <- 9999
coef.sim <- matrix(0, nrow=R, ncol=2)
for (j in 1:R) {
tree$count <- rpois(n, predict(tree.nls))
tree.wnls <- nls(height ~ exp(b0 + b1*age + b2*age2),
data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007),
weights = 1/age)
coef.sim[j, ] <- coef(tree.wnls)
}
puntreated <- subset(Puromycin, state=="treated")
ptreated <- subset(Puromycin, state=="treated")
ptreated <- subset(Puromycin, state=="treated")
ptreated
treatedlm <- lm(1/rate ~ 1/conc, ptreated)
treatedlm <- lm(1/rate ~ 1/conc, ptreated)
summary(treatedlm)
treatedlm <- lm((1/rate) ~ (1/conc), ptreated)
summary(treatedlm)
x <- 1/ptreated$conc
y <- 1/ptreated$rate
treatedlm <- lm(y~x)
summary(treatedlm)
ptreated$x <- 1/ptreated$conc
ptreated$y <- 1/ptreated$rate
treatedlm <- lm(y~x,data=ptreated)
summary(treatedlm)
p.nls <- nls(y ~ exp(b0 + b1*conc),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.00024))
p.nls <- nls(y ~ exp(b0 + b1*conc),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.00024))
p.nls
p.nls <- nls(y ~ exp(b0 + b1*conc),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.00024))
coef(p.nls)
p.nls <- nls(y ~ exp(b0 + b1*x),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.00024))
coef(p.nls)
summaey(p.nls)
summary(p.nls)
summary(tree.wnls)
tree.wnls <- nls(log(height) ~ exp(b0 + b1*age + b2*age2),
data = tree.sample,
start = c(b0 = 0.74, b1 = 0.31, b2 = -0.007),
weights = 1/age)
coef(tree.wnls)
summary(tree.wnls)
plot(ptreated)
plot(y~x,ptreated)
install.packages("drc")
library(drc)
#install.packages("drc")
library(drc)
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
plot(m1, log = '', pch = 17, main = "Fitted MM curve")
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
plot(m1, log = '', main = "Fitted MM curve")
ptreated$x <- 1/ptreated$conc
ptreated$y <- 1/ptreated$rate
treatedlm <- lm(log(y)~x,data=ptreated)
summary(treatedlm)
p.nls <- nls(y ~ exp(b0 + b1*x),
data = ptreated,
start = c(b0 = -5.20, b1 = 0.02))
coef(p.nls)
summary(p.nls)
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
plot(m1, log = '', main = "Fitted MM curve")
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
plot(m1)
#install.packages("drc")
library(drc)
m1 <- drm(y ~ x, data = ptreated, fct = MM.2())
plot(m1, log = '', main = "Fitted MM curve")
yQ2 <- t(y) %*% Q2
U <- qr.R(jojo.qr)
y <- p4.18[,4]
Q1y <- t(Q1)%*%y
betahat <- solve(U,Q1y)
betahat
yQ2 <- t(y) %*% Q2
Q2y <- t(Q2) %*% y
sigma <- (yQ2 %*% Q2y)/9
sqrt(sigma)
tree.sample$age2 <- tree.sample$age^2
tree.lm <- (lm((height)~age+age2,tree.sample))
summary(tree.lm)
tree.wlm <- lm((height) ~ exp(b0 + b1*age + b2*age2),
data = tree.sample,
weights = 1/age)
coef(tree.wlm)
tree.wlm <- lm((height) ~(age + age2),
data = tree.sample,
weights = 1/age)
coef(tree.wlm)
tree.wlm <- lm((height) ~(age + age2),
data = tree.sample,
weights = 1/age)
summary(tree.wlm)
ptreated$x <- 1/ptreated$conc
ptreated$y <- 1/ptreated$rate
treatedlm <- lm(y~x,data=ptreated)
summary(treatedlm)
p.nls <- nls(y ~ (b0*conc)/(conc+b1),
data = ptreated,
start = c(b0 = 005, b1 = 0.0002))
coef(p.nls)
p.nls <- nls(y ~ (b0*conc)/(conc+b1),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.0002))
coef(p.nls)
p.nls <- nls(rate ~ (b0*conc)/(conc+b1),
data = ptreated,
start = c(b0 = 0.005, b1 = 0.0002))
p.nls <- nls(rate ~ (b0*conc)/(conc+b1),
data = ptreated,
start = c(b0 = 1/0.005, b1 = 0.0002))
coef(p.nls)
summary(p.nls)
plot(rate~conc,ptreated)
#install.packages("drc")
plot(rate~conc,ptreated)
#install.packages("drc")
curve((b0*x)/(x+b1),from=0,to=1.7)
plot(rate~conc,ptreated)
#install.packages("drc")
curve((b0*x)/(x+b1),from=0,to=1.7,add=TRUE)
plot(rate~conc,ptreated)
#install.packages("drc")
curve((212.68365524*x)/(x+0.06412114),from=0,to=1.7,add=TRUE)
plot(rate~conc,ptreated)
curve((212.68365524*x)/(x+0.06412114),from=0,to=1.7,add=TRUE)
Q12 <- Q1[,-1]
b <- t(Q12) %*% y
a <- t(y) %*% Q12
a %*% b
Q12 <- Q1[,-1]
b <- t(Q12) %*% y
a <- t(y) %*% Q12
(a %*% b)/3
Q12 <- Q1[,-1]
b <- t(Q12) %*% y
a <- t(y) %*% Q12
c <- (a %*% b)/3
d <- t(y) %*% Q2
e <- t(Q2) %*% y
f <- (d %*% e)/9
c/f
Q12 <- Q1[,-1]
b <- t(Q12) %*% y
a <- t(y) %*% Q12
c <- (a %*% b)/3
d <- t(y) %*% Q2
e <- t(Q2) %*% y
f <- (d %*% e)/9
fstat <- c/f
fstat
1-pf(fstat,9,9)
1-pf(fstat,9,13)
test<-data.frame(x7=5000,x10=4)
test
test<-data.frame(x7=4,x10=5000)
predict(Gasmil,newdata=test,se.fit=TRUE,interval="confidence",level=0.95,type="response")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("mclust")
#install.packages("teigen")
library(mclust)
mfaith <- Mclust(faithful, G=1:5)
plot(mfaith, what="BIC")
plot(mfaith, what="classification")
plot(mfaith, what="BIC")
summary(mfaith)
plot(mfaith, what="BIC")
mfaith$BIC
plot(mfaith, what="uncertainty")
plot(mfaith, what="density")
library(teigen)
knitr::opts_chunk$set(echo = TRUE)
-(log((100-80)/100)+log((100-40)/100)+log(95/100)+log(100/100)+log(70/100))/5
library(MPV)
library(MPV)
p13.6
library(MPV)
plot(p13.6)
library(MPV)
x <- p13.6$months
y <- p13.6$numfail
plot(y~x)
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(p13.4, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(p13.6, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
library(MPV)
x <- p13.6$months
y <- p13.6$numfail
plot(y~x)
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(p13.6, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(p13.6, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
cigbutts
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(p13.6, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
y.glm <- glm(y ~ x, family = poisson(link = "log"))
plot(y~x, main = "Estimate of E[Y|X=x]")
a <- coef(y.glm)[1]
b <- coef(y.glm)[2]
curve(exp(a + b*x), add = TRUE)
par(mfrow=c(1,2))
Pearson.resids <- (y - exp(a + b*x))/sqrt(exp(a + b*x))
Deviance.resids <- sqrt(2*abs(log(dpois(y, y)) -
log(dpois(y, lambda = exp(a + b*x)))))*sign(y - exp(a + b*x))
plot(Pearson.resids ~ I(a + b*x))
plot(Deviance.resids ~ I(a + b*x))
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
plot(y.glm)
library(DAAG)
install.packages("DAAG")
library(DAAG)
frogs
#install.packages("DAAG")
library(DAAG)
plot(frogs$pres.abs~log(frogs$distance)+log(frogs$NoOfPools)+mean(frogs$meanmin)+mean(frogs$meanmax)
#install.packages("DAAG")
library(DAAG)
plot(frogs$pres.abs~log(frogs$distance)+log(frogs$NoOfPools)+mean(frogs$meanmin)+mean(frogs$meanmax))
#install.packages("DAAG")
library(DAAG)
plot(frogs$pres.abs~(log(frogs$distance)+log(frogs$NoOfPools)+mean(frogs$meanmin)+mean(frogs$meanmax)))
#install.packages("DAAG")
library(DAAG)
lm(frogs$pres.abs~(log(frogs$distance)+log(frogs$NoOfPools)+mean(frogs$meanmin)+mean(frogs$meanmax)))
#install.packages("DAAG")
library(DAAG)
lm(frogs$pres.abs~((frogs$distance)+(frogs$NoOfPools)+(frogs$meanmin)+(frogs$meanmax)))
#install.packages("DAAG")
library(DAAG)
plot(frogs$pres.abs~((frogs$distance)+(frogs$NoOfPools)+(frogs$meanmin)+(frogs$meanmax)))
#install.packages("DAAG")
library(DAAG)
glm(frogs$pres.abs~((frogs$distance)+(frogs$NoOfPools)+(frogs$meanmin)+(frogs$meanmax)))
#install.packages("DAAG")
library(DAAG)
glm(frogs$pres.abs~(frogs$distance+frogs$NoOfPools+frogs$meanmin+frogs$meanmax))
#install.packages("DAAG")
library(DAAG)
glmfrog <- glm(frogs$pres.abs~(frogs$distance+frogs$NoOfPools+frogs$meanmin+frogs$meanmax))
#install.packages("DAAG")
library(DAAG)
glmfrog <- glm(frogs$pres.abs~(frogs$distance+frogs$NoOfPools+frogs$meanmin+frogs$meanmax))
summary(glmfrog)
#install.packages("DAAG")
library(DAAG)
glmfrog <- glm(frogs$pres.abs~(log(frogs$distance)+log(frogs$NoOfPools)+frogs$meanmin+frogs$meanmax))
summary(glmfrog)
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
plot(frogglm)
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
plot(frogsglm)
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
plot(glmfrog)
install.packages("plotly")
#install.packages("plotly")
library(plotly)
install.packages("devtools")
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
library(devtools)
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
library(devtools)
install.packages("dashcorecomponents")
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
library(devtools)
install.packages("dashCoreComponents")
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
library(devtools)
#install.packages("dashCoreComponents")
install.packages("dash")
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
library(devtools)
#install.packages("dashCoreComponents")
#install.packages("dash")
devtools::install_github('facultyai/dash-bootstrap-components@r-release')
setwd("~/Desktop/dashboard2-group-a/src")
source("app.R")
source("app.R")
knitr::opts_chunk$set(echo = TRUE)
labels(eurodist)
plot(cmdscale(eurodist)[,1], cmdscale(eurodist)[,2], type = "n", xlab = "", ylab = "", asp = 1, axes = FALSE, main = "MDS Results on eurodist")
text(cmdscale(eurodist)[,1], cmdscale(eurodist)[,2], rownames(cmdscale(eurodist)), cex = 0.6)
plot(cmdscale(eurodist)[,1], -cmdscale(eurodist)[,2], type = "n", xlab = "", ylab = "", asp = 1, axes = FALSE, main = "MDS Results on eurodist")
text(cmdscale(eurodist)[,1], -cmdscale(eurodist)[,2], rownames(cmdscale(eurodist)), cex = 0.6)
install.packages("dashHtmlComponents")
